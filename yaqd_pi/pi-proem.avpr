{
    "config": {
        "adc_analog_gain": {
            "defualt": "Low",
            "doc": "Gain setting for output amplifier.\\\n         When EM gain is 1, the output amplifier is at the Low Noise register.\\\n         When EM gain is not 1, the output amplifier at the EM register.",
            "type": "string"
        },
        "em_gain": {
            "default": 1,
            "doc": "Gain values can be integers from 1-1000. \\\n    \t This value is mapped onto a CCD clock voltage in the extended multiplication (EM) register. \\\n    \t Note: If using over 100, read manual about careful operation. \\\n    \t Defualt is 1.",
            "type": "int"
        },
        "enable": {
            "default": true,
            "doc": "Disable this daemon. The kind entry-point will not attempt to start this daemon.",
            "origin": "is-daemon",
            "type": "boolean"
        },
        "exposure_time": {
            "default": 33,
            "doc": "Camera sensor exposure time (in milliseconds).",
            "type": "float"
        },
        "log_level": {
            "default": "info",
            "doc": "Set daemon log-level.",
            "origin": "is-daemon",
            "type": {
                "name": "level",
                "symbols": [
                    "debug",
                    "info",
                    "notice",
                    "warning",
                    "error",
                    "critical",
                    "alert",
                    "emergency"
                ],
                "type": "enum"
            }
        },
        "log_to_file": {
            "default": false,
            "doc": "Optionally force logging to a file.",
            "origin": "is-daemon",
            "type": "boolean"
        },
        "loop_at_startup": {
            "default": false,
            "doc": "If set to true, the daemon will begin to loop measure as soon as it starts.",
            "origin": "has-measure-trigger",
            "type": "boolean"
        },
        "make": {
            "default": "princeton_instruments",
            "origin": "is-daemon",
            "type": [
                "null",
                "string"
            ]
        },
        "model": {
            "default": "proEM-HS:512BX3",
            "origin": "is-daemon",
            "type": [
                "null",
                "string"
            ]
        },
        "port": {
            "doc": "TCP port for daemon to occupy.",
            "origin": "is-daemon",
            "type": "int"
        },
        "roi_height": {
            "doc": "Specify the number of pixel rows to acquire for the ROI. \\\n    \t Can be no larger than (512 - roi_top + 1). \\\n    \t Defaults to use all rows starting from 'roi_top'.",
            "type": [
                "null",
                "int"
            ]
        },
        "roi_left": {
            "default": null,
            "doc": "Specify the left-most pixel column of the ROI. \\\n\tDefaults to the full left of the camera sensor (column 1).",
            "type": [
                "null",
                "int"
            ]
        },
        "roi_top": {
            "default": null,
            "doc": "Specify the top-most pixel row of the ROI.\\\n    \t Defaults to the top row of the camera sensor (row 1).",
            "type": [
                "null",
                "int"
            ]
        },
        "roi_width": {
            "default": null,
            "doc": "Specify the number of pixel columns to acquire for the ROI. \\\n\tCan be no larger than (512 - roi_left + 1). \\\n\tDefaults to use all columns starting from 'roi_left'. ",
            "type": [
                "null",
                "int"
            ]
        },
        "roi_x_binning": {
            "default": 1,
            "doc": "Option to bin pixels horizontally.\\\n\tAllowed values are 1, 2, 4, and 8. \\\n\tThis feature should not be used if taking a spectrum. \\\n\tDefault is no horizontal binning (1).",
            "type": "int"
        },
        "roi_y_binning": {
            "default": 1,
            "doc": "Option to bin pixels vertically. \\\n\tAllowed values are 1, 2, 4, 8, 32, 100. \\\n\tDefault is no vertical binning (1).",
            "type": "int"
        },
        "sensor_temperature_setpoint": {
            "default": -70.0,
            "doc": "Set the sensor temperature in deg C. \\\n        Be careful if setting to anything but -70.0 C \\\n        Do not set below -80.0 C",
            "type": "float"
        },
        "serial": {
            "default": null,
            "doc": "Serial number for the particular device represented by the daemon",
            "origin": "is-daemon",
            "type": [
                "null",
                "string"
            ]
        }
    },
    "doc": "",
    "installation": {
        "PyPI": "https://pypi.org/project/yaqd-pi"
    },
    "links": {
        "bugtracker": "https://gitlab.com/yaq/yaqd-pi/-/issues",
        "source": "https://gitlab.com/yaq/yaqd-pi"
    },
    "messages": {
        "busy": {
            "doc": "Returns true if daemon is currently busy.",
            "origin": "is-daemon",
            "request": [],
            "response": "boolean"
        },
        "direct_serial_write": {
            "doc": "Expose direct access to the serial port to clients.\n\nThis should not be encouraged for normal use, but may be very important for debugging.\nIf a device is expected to return data, it should be logged at the INFO level, not returned to the client.\nThis is done to allow long tasks to be run asynchronously, and to explicitly discourage use of this method except when debugging.\nSetting `busy` to true is encouraged, but individual daemon writers should consider their own use case.\n",
            "origin": "uses-serial",
            "request": [
                {
                    "name": "message",
                    "type": "bytes"
                }
            ],
            "response": "null"
        },
        "get_channel_mappings": {
            "doc": "Defines which mapping keys apply to which channel keys. Each channel may have zero or many mappings. Mappings must broadcast into corresponding channels.",
            "origin": "has-mapping",
            "request": [],
            "response": {
                "type": "map",
                "values": {
                    "items": "string",
                    "type": "array"
                }
            }
        },
        "get_channel_names": {
            "doc": "Get current channel names.",
            "origin": "is-sensor",
            "request": [],
            "response": {
                "items": "string",
                "type": "array"
            }
        },
        "get_channel_shapes": {
            "doc": "Get current channel shapes. If list is empty, channel is scalar.",
            "origin": "is-sensor",
            "request": [],
            "response": {
                "type": "map",
                "values": {
                    "items": "int",
                    "type": "array"
                }
            }
        },
        "get_channel_units": {
            "doc": "Get current channel units.",
            "origin": "is-sensor",
            "request": [],
            "response": {
                "type": "map",
                "values": [
                    "null",
                    "string"
                ]
            }
        },
        "get_config": {
            "doc": "Full configuration for the individual daemon as defined in the TOML file.\nThis includes defaults and shared settings not directly specified in the daemon-specific TOML table.\n",
            "origin": "is-daemon",
            "request": [],
            "response": "string"
        },
        "get_config_filepath": {
            "doc": "String representing the absolute filepath of the configuration file on the host machine.\n",
            "origin": "is-daemon",
            "request": [],
            "response": "string"
        },
        "get_mapping_id": {
            "doc": "Mapping ID. This integer increments every time the mapping is updated. Clients can safely check this id to verify that their cached mappings are correct, if desired.",
            "origin": "has-mapping",
            "request": [],
            "response": "int"
        },
        "get_mapping_units": {
            "doc": "Must return units for every mapping. Units can be null.",
            "origin": "has-mapping",
            "request": [],
            "response": {
                "type": "map",
                "values": [
                    "null",
                    "string"
                ]
            }
        },
        "get_mappings": {
            "doc": "Mappings themselves.",
            "origin": "has-mapping",
            "request": [],
            "response": {
                "type": "map",
                "values": [
                    "null",
                    "ndarray",
                    "double"
                ]
            }
        },
        "get_measured": {
            "doc": "Returns map of channel_name to measured_value. Always returns additional key measurement_id.",
            "origin": "is-sensor",
            "request": [],
            "response": {
                "type": "map",
                "values": [
                    "double",
                    "ndarray",
                    "int"
                ]
            }
        },
        "get_measurement_id": {
            "doc": "Get current measurement_id. Clients are encouraged to watch for this to be updated before calling get_measured to get entire measurement.",
            "origin": "is-sensor",
            "request": [],
            "response": {
                "type": "int"
            }
        },
        "get_state": {
            "doc": "Get version of the running daemon",
            "origin": "is-daemon",
            "request": [],
            "response": "string"
        },
        "id": {
            "doc": "JSON object with information to identify the daemon, including name, kind, make, model, serial.\n",
            "origin": "is-daemon",
            "request": [],
            "response": {
                "type": "map",
                "values": [
                    "null",
                    "string"
                ]
            }
        },
        "measure": {
            "doc": "Initiate a measurement. Returns integer, measurement ID.",
            "origin": "has-measure-trigger",
            "request": [
                {
                    "default": false,
                    "name": "loop",
                    "type": "boolean"
                }
            ],
            "response": "int"
        },
        "shutdown": {
            "doc": "Cleanly shutdown (or restart) daemon.",
            "origin": "is-daemon",
            "request": [
                {
                    "default": false,
                    "name": "restart",
                    "type": "boolean"
                }
            ],
            "response": "null"
        },
        "stop_looping": {
            "doc": "Stop looping measurement.",
            "origin": "has-measure-trigger",
            "request": [],
            "response": "null"
        }
    },
    "protocol": "pi-proem",
    "requires": [],
    "state": {},
    "traits": [
        "has-mapping",
        "has-measure-trigger",
        "is-daemon",
        "is-sensor",
        "uses-serial"
    ],
    "types": [
        {
            "fields": [
                {
                    "name": "shape",
                    "type": {
                        "items": "int",
                        "type": "array"
                    }
                },
                {
                    "name": "typestr",
                    "type": "string"
                },
                {
                    "name": "data",
                    "type": "bytes"
                },
                {
                    "name": "version",
                    "type": "int"
                }
            ],
            "logicalType": "ndarray",
            "name": "ndarray",
            "type": "record"
        }
    ]
}